lexer:
  keywords: [and, double, not_eq, throw,
    and_eq, dynamic_cast, operator, true,
    asm, else, or, try,
    auto, enum, or_eq, typedef,
    bitand, explicit, private, typeid,
    bitor, extern, protected, typename,
    bool, false, public, union,
    break, float, register, unsigned,
    case, for, reinterpret-cast, using,
    catch, friend, return, virtual,
    char, goto, short, void,
    class, if, signed, volatile,
    compl, inline, sizeof, wchar_t,
    const, int, static, while,
    const-cast, long, static_cast, xor,
    continue, mutable, struct, xor_eq,
    default, namespace, switch,
    delete, new, template,
    do, not, this]

  regex:
    String: R"(\".*\")"
    Char: R"(\'\\\S{1}\'|\'[^\\]?\')"
    Whole: R"(^[0-9]+$)"
    Float: R"([+-]?([0-9]+([.][0-9]*)?|[.][0-9]+))"
    Hexadecimal: R"(0[xX][0-9a-fA-F]+)"
    Comment: R"(^//.*|^/\*[\S\n\s]*\*/)"
    Preprocessor: R"(^#.*)"
    Identifier: R"([a-zA-Z_][a-zA-Z0-9_]*)"
    Operator: R"(==|-=|\+=|/=|\*=|&=|>=|<=|<<|>>|!|::|\.|=|\+|\*|-|<|>|\\)"
    Delimiter: R"(;|\{|\}|\(|\)|\[|\]|\s|,)"
